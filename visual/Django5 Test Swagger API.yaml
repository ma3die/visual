openapi: 3.0.3
info:
  title: Django5 Test Swagger API
  version: 1.0.0
  description: Django5 Test Swagger API description
paths:
  /auth/:
    get:
      operationId: auth_list
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
          description: ''
    post:
      operationId: auth_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Account'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: ''
  /auth/{id}/:
    get:
      operationId: auth_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Учетную запись.
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: ''
    put:
      operationId: auth_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Учетную запись.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Account'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: ''
    patch:
      operationId: auth_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Учетную запись.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAccount'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: ''
    delete:
      operationId: auth_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Учетную запись.
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/me/:
    get:
      operationId: auth_me_retrieve
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: ''
  /auth/refresh_token/:
    post:
      operationId: auth_refresh_token_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /auth/reg/:
    post:
      operationId: auth_reg_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /comments/:
    get:
      operationId: comments_list
      tags:
      - comments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: ''
    post:
      operationId: comments_create
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /comments/{post_slug}/:
    get:
      operationId: comments_list_2
      parameters:
      - in: path
        name: post_slug
        schema:
          type: string
        required: true
      tags:
      - comments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: ''
    post:
      operationId: comments_create_2
      parameters:
      - in: path
        name: post_slug
        schema:
          type: string
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /posts/:
    get:
      operationId: posts_list
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
          description: ''
    post:
      operationId: posts_create
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
  /posts/{slug}/:
    get:
      operationId: posts_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          title: Слаг
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    put:
      operationId: posts_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          title: Слаг
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    patch:
      operationId: posts_partial_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          title: Слаг
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPost'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    delete:
      operationId: posts_destroy
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          title: Слаг
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Account:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        password:
          type: string
          title: Пароль
          maxLength: 128
        last_login:
          type: string
          format: date-time
          nullable: true
          title: Последний вход
        first_name:
          type: string
          title: Имя
          maxLength: 50
        last_name:
          type: string
          title: Фамилия
          maxLength: 50
        username:
          type: string
          title: Никнейм
          maxLength: 50
        email:
          type: string
          format: email
          title: Электронная почта
          maxLength: 50
        phone:
          type: string
          title: Телефон
          maxLength: 50
        date_register:
          type: string
          format: date-time
          readOnly: true
          title: Дата регистрации
        last_join:
          type: string
          format: date-time
          readOnly: true
          title: Последний вход
        is_admin:
          type: boolean
          title: Администратор
        is_active:
          type: boolean
          title: Активный
        is_staff:
          type: boolean
          title: Персонал
        is_superuser:
          type: boolean
          title: Супер пользователь
      required:
      - date_register
      - email
      - first_name
      - id
      - last_join
      - last_name
      - password
      - phone
      - username
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: string
          title: Никнейм
        post:
          type: string
          title: Слаг
        text:
          type: string
          title: Комментарий
        created_date:
          type: string
          format: date-time
          readOnly: true
          title: Дата создания
      required:
      - author
      - created_date
      - id
      - post
      - text
    PatchedAccount:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        password:
          type: string
          title: Пароль
          maxLength: 128
        last_login:
          type: string
          format: date-time
          nullable: true
          title: Последний вход
        first_name:
          type: string
          title: Имя
          maxLength: 50
        last_name:
          type: string
          title: Фамилия
          maxLength: 50
        username:
          type: string
          title: Никнейм
          maxLength: 50
        email:
          type: string
          format: email
          title: Электронная почта
          maxLength: 50
        phone:
          type: string
          title: Телефон
          maxLength: 50
        date_register:
          type: string
          format: date-time
          readOnly: true
          title: Дата регистрации
        last_join:
          type: string
          format: date-time
          readOnly: true
          title: Последний вход
        is_admin:
          type: boolean
          title: Администратор
        is_active:
          type: boolean
          title: Активный
        is_staff:
          type: boolean
          title: Персонал
        is_superuser:
          type: boolean
          title: Супер пользователь
    PatchedPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        tags:
          type: string
        author:
          type: string
          title: Никнейм
        name:
          type: string
          title: Название поста
          maxLength: 50
        image:
          type: string
          format: uri
          title: Изображение
        text:
          type: string
          title: Описание
        created_date:
          type: string
          format: date-time
          readOnly: true
          title: Дата создания
        slug:
          type: string
          readOnly: true
          title: Слаг
        avialable_comment:
          type: boolean
          readOnly: true
          title: Доступ к комментариям
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        tags:
          type: string
        author:
          type: string
          title: Никнейм
        name:
          type: string
          title: Название поста
          maxLength: 50
        image:
          type: string
          format: uri
          title: Изображение
        text:
          type: string
          title: Описание
        created_date:
          type: string
          format: date-time
          readOnly: true
          title: Дата создания
        slug:
          type: string
          readOnly: true
          title: Слаг
        avialable_comment:
          type: boolean
          readOnly: true
          title: Доступ к комментариям
      required:
      - author
      - avialable_comment
      - created_date
      - id
      - image
      - name
      - slug
      - tags
    Register:
      type: object
      properties:
        first_name:
          type: string
          title: Имя
          maxLength: 50
        last_name:
          type: string
          title: Фамилия
          maxLength: 50
        username:
          type: string
          title: Никнейм
          maxLength: 50
        email:
          type: string
          format: email
          title: Электронная почта
          maxLength: 50
        phone:
          type: string
          title: Телефон
          maxLength: 50
        password:
          type: string
          writeOnly: true
          title: Пароль
          maxLength: 128
        password2:
          type: string
          writeOnly: true
      required:
      - email
      - first_name
      - last_name
      - password
      - password2
      - phone
      - username
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
